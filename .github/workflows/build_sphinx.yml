name: "Sphinx: Render docs"

on: 
  push:
    branches: ["main", "master"]
    paths:
      - "docsrc/**"
      - "schimpy/**"
      - "pyproject.toml"
      - ".github/workflows/build_sphinx.yaml"
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: docs-${{ github.ref }}   #"pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install schimpy (no deps), then docs extras
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip
          # install just your package (no runtime deps pulled)
          python -m pip install -e . --no-deps -v

          # install docs extras from pyproject if present
          python - <<'PY'
          import sys, subprocess, pathlib
          try:
              import tomllib  # Py>=3.11
          except ModuleNotFoundError:
              subprocess.check_call([sys.executable, "-m", "pip", "install", "tomli"])
              import tomli as tomllib

          pp = pathlib.Path("pyproject.toml")
          raw = pp.read_text(encoding="utf-8")
          data = tomllib.loads(raw)
          proj = data.get("project", {})
          opt = proj.get("optional-dependencies", {})

          # prefer 'docs' but accept 'doc' as a fallback
          pkgs = opt.get("docs") or opt.get("doc")
          if not pkgs:
              print("No [project.optional-dependencies].docs (or .doc) group found; skipping docs extras.")
              sys.exit(0)

          # normalize to list
          if isinstance(pkgs, str):
              pkgs = [pkgs]

          # install the extras (with deps)
          cmd = [sys.executable, "-m", "pip", "install", *pkgs]
          print("Installing docs extras:", " ".join(pkgs))
          subprocess.check_call(cmd)
          PY
      
      - name: Build docs
        run: |
          sphinx-apidoc --force -o . ../schimpy -T --templatedir ./_templates
          make -C docsrc clean
          make -C docsrc html

      # Upload the built site as a Pages artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/html

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages      # ðŸ‘ˆ this resolves your 400 error
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
        
          

