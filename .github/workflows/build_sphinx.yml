name: "Sphinx: Render docs"

on: 
  push:
    branches: ["main", "master"]
    paths:
      - "docsrc/**"
      - "schimpy/**"
      - "pyproject.toml"
      - ".github/workflows/build_sphinx.yml"
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: docs-${{ github.ref }}   #"pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up micromamba (conda-forge + optional org channel)
        uses: mamba-org/setup-micromamba@v2
        with:
          init-shell: bash
          cache-downloads: true
          environment-name: docs
          create-args: >-
            python>=3.11
            sphinx
            sphinx-rtd-theme
            numpydoc
          condarc: |
            channel_priority: strict
            channels:
              - conda-forge
              - cadwr-dms   # keep if you publish your internal deps here

      - name: Install schimpy (from conda channels)
        shell: bash -l {0}
        run: |
          micromamba activate docs
          micromamba install -y -c conda-forge -c cadwr-dms schimpy

      - name: Install docs extras from pyproject.toml (resolved by conda)
        shell: bash -l {0}
        run: |
          micromamba activate docs
          python - <<'PY'
          import sys, subprocess
          try:
              import tomllib   # py>=3.11
              with open("pyproject.toml", "rb") as f:  # NOTE: use load() with binary file
                  return tomllib.load(f)
          except ModuleNotFoundError:
              subprocess.check_call([sys.executable, "-m", "pip", "install", "tomli"])
              import tomli as tomllib
              with open("pyproject.toml", "rb") as f:
                  return tomllib.load(f)
        
          NAME_MAP = {
              "Pillow": "pillow",
              "netCDF4": "netcdf4",
              # extend if any PyPI vs conda names differ
          }
        
          data = tomllib.loads(open("pyproject.toml","rb").read())
          proj = data.get("project", {})
          extras = proj.get("optional-dependencies", {})
          docs = extras.get("docs", [])
          if isinstance(docs, str):
              docs = [docs]
        
          # Convert specifiers like "pkg>=1.2" -> "pkg" for conda
          def to_conda_name(spec):
              name = spec.split()[0]           # drop environment markers
              name = name.split(";")[0]        # drop markers after semicolon
              name = name.split(">=")[0].split("==")[0].split("~=")[0].split("<")[0]
              name = name.strip()
              return NAME_MAP.get(name, name).lower()
        
          pkgs = sorted({to_conda_name(s) for s in docs if s})
          if pkgs:
              print("Installing docs extras via conda:", pkgs, flush=True)
              subprocess.check_call(["micromamba","install","-y","-c","conda-forge", *pkgs])
          else:
              print("No [project.optional-dependencies].docs group found; skipping.", flush=True)
          PY

      - name: Build Sphinx
        shell: bash -l {0}
        env:
          # flip to "0" if/when you want a full unmocked build
          DOCS_USE_MOCKS: "0"
        run: |
          sphinx-apidoc --force -o . ../schimpy -T --templatedir ./_templates
          make -C docsrc clean
          make -C docsrc html

      # Upload the built site as a Pages artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/html

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages      # ðŸ‘ˆ this resolves your 400 error
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
        
          

