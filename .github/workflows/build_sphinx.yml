name: "Sphinx: Render docs"

on: 
  push:
    branches: ["main", "master"]
    paths:
      - "docsrc/**"
      - "schimpy/**"
      - "pyproject.toml"
      - ".github/workflows/build_sphinx.yml"
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: docs-${{ github.ref }}   #"pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up micromamba (conda-forge + optional org channel)
        uses: mamba-org/setup-micromamba@v2
        with:
          init-shell: bash
          cache-downloads: true
          environment-name: docs
          create-args: >-
            python=3.12
            sphinx
            sphinx-rtd-theme
            numpydoc
          condarc: |
            channel_priority: strict
            channels:
              - conda-forge
              - cadwr-dms   # keep if you publish your internal deps here

      - name: Install schimpy (from conda channels)
        shell: bash -l {0}
        run: |
          micromamba activate docs
          python scripts/install_extras.py
          micromamba install -y -c conda-forge -c cadwr-dms schimpy

      - name: Install docs extras (pip WITH deps)
        shell: bash -l {0}
        env:
          PIP_NO_INDEX: "0"            # ensure pip can resolve docs deps
          PIP_NO_BUILD_ISOLATION: "1"  # optional; fine to keep
        run: |
          micromamba activate docs
          # For [project.optional-dependencies].docs:
          pip install -e . --no-deps
          pip install .[docs] 

      - name: Build Sphinx
        shell: bash -l {0}
        env:
          # flip to "0" if/when you want a full unmocked build
          DOCS_USE_MOCKS: "0"
        run: |
          sphinx-apidoc --force -o . ../schimpy -T --templatedir ./_templates
          make -C docsrc clean
          make -C docsrc html

      # Upload the built site as a Pages artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/html

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages      # ðŸ‘ˆ this resolves your 400 error
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
        
          

