[build-system]
requires = ["setuptools>=68", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "schimpy"
dynamic = ["version"] # Placeholder; setuptools-scm will manage this
description = "Python package for SCHISM"
readme = "README.rst"
license = "MIT"
license-files = [
    "LICENSE",
]
authors = [
    {name = "California Department of Water Resources", email = "Eli.Ateljevich@water.ca.gov"},
    {name = "California Department of Water Resources", email = "Kijin.Nam@water.ca.gov"}
]

# This has to be coordinated with entries in .github/python-package-conda.yml and build_sphinx.yml
requires-python = ">=3.10,<3.13"

classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.10"
]

keywords = ["schimpy", "SCHISM", "hydrodynamics", "mesh", "geometry", "GIS", "geospatial", "data processing"]

# These should be the actual dependencies for API use and associated testing (but not the test framework itself)
# Pinning is very hard to maintain has two uses:
# 1. making sure we avoid bugs or have a sufficiently new versions
# 2. pinning > a very low version helps reduce the search space for the conda 'solve' while having no real
#    influence 
dependencies = [
    "geopandas",
    "vtools3>=3.9",
    "dms-datastore",
    "gdal",
    "pyogrio",
    "xarray",
    "netcdf4",
    "scipy>=1.8",
    "matplotlib",
	"numba",
    "statsmodels",
    "palettable",
    "boto3",
    "pyproj",
    "nodepy",
    "shapely>=2.0",
    "param",
    "rtree",
    "click",
    "dask>=2022.11",
    "numpy>2.0",     
	"diskcache",
	"param"
]

[project.optional-dependencies]
# These are the tools needed to perform documentation
doc = [
    "sphinx",
    "sphinx-rtd-theme",
    "sphinx-click",
    "sphinx-design",
    "sphinx-argparse",
    "sphinxcontrib-bibtex",
    "sphinxcontrib-mermaid",
    "myst-parser",
    "numpydoc",
    "pillow>=4.0.0",
    "nbsphinx",
	"nbconvert",
	"ipykernel",
    "docutils",
	"pandoc",
	"matplotlib",
	"ipython"
]

#These are the tools needed to perform testing. 
test = [
    "pytest>=3",
    "pytest-cov",
    "tox",
    "click"
]

# If using pip, these would be used for the build
# similar tools are listed in python-package-conda.yml and if there are minimum versions (e.g. setuptools)
# this is where they should be spelled out
build = [
    "build",
    "pip",
    "setuptools>68",
    "wheel",
    "setuptools-scm"
]
[project.urls]
Homepage = "https://cadwrdeltamodeling.github.io/schimpy/"

[tool.flake8]
exclude = ["docs"]

[tool.ruff.lint]
select = ["NPY201"]

[tool.setuptools.packages.find]
include = ["schimpy","schimpy.util"]
exclude = ["docsrc"]

[tool.setuptools_scm]

[project.scripts]
sch = "schimpy.__main__:cli"
batch_metrics = "schimpy.batch_metrics:batch_metrics_cli"
clip_dems = "schimpy.clip_dems:clip_dems_cli"
contour_smooth = "schimpy.contour_smooth:contour_smooth_cli"
convert_mesh = "schimpy.convert_mesh:convert_mesh_cli"
convert_polygons = "schimpy.convert_polygons:convert_polygons_cli"
convert_linestrings = "schimpy.convert_linestrings:convert_linestrings_cli"
convert_points = "schimpy.convert_points:convert_points_cli"
combine_consume = "schimpy.combine_consume:combine_consume_cli"
model_time = "schimpy.model_time:model_time_cli"
gen_elev2d = "schimpy.gen_elev2d:gen_elev2d_cli"

prepare_schism = "schimpy.prepare_schism:main"
hotstart_inventory = "schimpy.hotstart_inventory:main"
create_vgrid_lsc2 = "schimpy.create_vgrid_lsc2:main"
schism_hotstart = "schimpy.schism_hotstart:main"
split_quad = "schimpy.split_quad:main"
small_areas = "schimpy.small_areas:main"
station = "schimpy.station:main"
create_hotstart = "schimpy.schism_hotstart:main"
create_nudging = "schimpy.nudging:main"
interpolate_structure = "schimpy.interpolate_structure:main"
merge_th = "schimpy.merge_th:main"

